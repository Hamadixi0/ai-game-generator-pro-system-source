# Codemagic YAML Configuration for AI Game Generator Pro
# Professional mobile build pipeline for Flutter and React Native games

workflows:
  # Flutter Game Build Pipeline
  flutter-game-build:
    name: Flutter Game Build
    max_build_duration: 60
    instance_type: mac_mini_m1
    
    environment:
      android_signing:
        - keystore_reference
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.aigamegen.fluttergame
      vars:
        PACKAGE_NAME: "com.aigamegen.fluttergame"
        GOOGLE_PLAY_TRACK: internal
        APP_STORE_APPLE_ID: 1234567890
      flutter: stable
      xcode: latest
      cocoapods: default
      
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - $HOME/.gradle/caches
        - $HOME/Library/Caches/CocoaPods
        
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: develop
          include: true
          source: true
        - pattern: main
          include: true
          source: true
      tag_patterns:
        - pattern: '*'
          include: true
          
    scripts:
      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
          
      - name: Get Flutter packages
        script: |
          flutter packages pub get
          
      - name: Flutter analyze
        script: |
          flutter analyze
          
      - name: Flutter unit tests
        script: |
          flutter test
          
      - name: Install pods
        script: |
          find . -name "Podfile" -execdir pod install \;
          
      - name: Flutter build APK
        script: |
          flutter build apk --release
          
      - name: Flutter build AAB
        script: |
          flutter build appbundle --release
          
      - name: Flutter build iOS
        script: |
          flutter build ipa --release --export-options-plist=/Users/builder/export_options.plist
          
    artifacts:
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
      
    publishing:
      email:
        recipients:
          - build@example.com
        notify:
          success: true
          failure: true
          
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: $GOOGLE_PLAY_TRACK
        submit_as_draft: true
        
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        beta_groups:
          - App Store Connect Users
        submit_to_app_store: false
        
  # React Native Game Build Pipeline
  react-native-game-build:
    name: React Native Game Build
    max_build_duration: 60
    instance_type: mac_mini_m1
    
    environment:
      android_signing:
        - keystore_reference
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.aigamegen.reactnativegame
      vars:
        PACKAGE_NAME: "com.aigamegen.reactnativegame"
        GOOGLE_PLAY_TRACK: internal
        APP_STORE_APPLE_ID: 1234567891
      node: 18.17.0
      xcode: latest
      cocoapods: default
      
    cache:
      cache_paths:
        - $HOME/.npm
        - $HOME/.gradle/caches
        - $HOME/Library/Caches/CocoaPods
        - node_modules
        
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: develop
          include: true
          source: true
        - pattern: main
          include: true
          source: true
      tag_patterns:
        - pattern: '*'
          include: true
          
    scripts:
      - name: Install npm dependencies
        script: |
          npm install
          
      - name: Install CocoaPods dependencies
        script: |
          cd ios && pod install
          
      - name: Set up local.properties
        script: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/android/local.properties"
          
      - name: Run tests
        script: |
          npm test -- --coverage --watchAll=false
          
      - name: Build Android APK
        script: |
          cd android
          ./gradlew assembleRelease
          
      - name: Build Android AAB
        script: |
          cd android
          ./gradlew bundleRelease
          
      - name: Build iOS
        script: |
          xcode-project build-ipa \
            --workspace "$CM_BUILD_DIR/ios/GameApp.xcworkspace" \
            --scheme "GameApp"
            
    artifacts:
      - android/app/build/outputs/**/*.apk
      - android/app/build/outputs/**/*.aab
      - android/app/build/outputs/**/mapping.txt
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      
    publishing:
      email:
        recipients:
          - build@example.com
        notify:
          success: true
          failure: true
          
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: $GOOGLE_PLAY_TRACK
        submit_as_draft: true
        
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        beta_groups:
          - App Store Connect Users
        submit_to_app_store: false
        
  # Unity Game Build Pipeline (if Unity games are generated)
  unity-game-build:
    name: Unity Game Build
    max_build_duration: 120
    instance_type: mac_pro
    
    environment:
      android_signing:
        - keystore_reference
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.aigamegen.unitygame
      vars:
        PACKAGE_NAME: "com.aigamegen.unitygame"
        UNITY_LICENSE: $UNITY_LICENSE
        UNITY_EMAIL: $UNITY_EMAIL
        UNITY_PASSWORD: $UNITY_PASSWORD
      xcode: latest
      
    cache:
      cache_paths:
        - $HOME/Library/Unity/cache
        - Library
        
    triggering:
      events:
        - push
        - tag
      branch_patterns:
        - pattern: main
          include: true
          source: true
          
    scripts:
      - name: Activate Unity License
        script: |
          $UNITY_HOME/Contents/MacOS/Unity -batchmode -quit -logFile \
            -serial ${UNITY_SERIAL} -username ${UNITY_EMAIL} -password ${UNITY_PASSWORD}
            
      - name: Build Unity Android
        script: |
          $UNITY_HOME/Contents/MacOS/Unity -batchmode -quit -logFile \
            -projectPath . -buildTarget Android -customBuildTarget Android \
            -customBuildPath android/build.apk -customBuildName build.apk \
            -executeMethod BuildCommand.PerformBuild
            
      - name: Build Unity iOS
        script: |
          $UNITY_HOME/Contents/MacOS/Unity -batchmode -quit -logFile \
            -projectPath . -buildTarget iOS -customBuildTarget iOS \
            -customBuildPath ios -executeMethod BuildCommand.PerformBuild
          xcodebuild -project ios/Unity-iPhone.xcodeproj -scheme Unity-iPhone \
            -configuration Release archive -archivePath build/Unity-iPhone.xcarchive
          xcodebuild -exportArchive -archivePath build/Unity-iPhone.xcarchive \
            -exportPath build/ios -exportOptionsPlist ios/ExportOptions.plist
            
    artifacts:
      - android/*.apk
      - build/ios/*.ipa
      - /tmp/xcodebuild_logs/*.log
      
    publishing:
      email:
        recipients:
          - build@example.com
        notify:
          success: true
          failure: true
          
  # Web Game Build Pipeline
  web-game-build:
    name: Web Game Build
    max_build_duration: 30
    instance_type: linux_x2
    
    environment:
      node: 18.17.0
      
    cache:
      cache_paths:
        - node_modules
        - $HOME/.npm
        
    triggering:
      events:
        - push
        - tag
      branch_patterns:
        - pattern: main
          include: true
          source: true
          
    scripts:
      - name: Install dependencies
        script: |
          npm install
          
      - name: Run tests
        script: |
          npm test
          
      - name: Build web game
        script: |
          npm run build
          
      - name: Deploy to GitHub Pages
        script: |
          npm run deploy
          
    artifacts:
      - build/**
      - dist/**
      
    publishing:
      email:
        recipients:
          - build@example.com
        notify:
          success: true
          failure: true