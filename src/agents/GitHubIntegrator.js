const { Octokit } = require('@octokit/rest');
const fs = require('fs').promises;
const path = require('path');

class GitHubIntegrator {
  constructor() {
    this.octokit = new Octokit({
      auth: process.env.GITHUB_TOKEN
    });
  }

  async createGameRepository(gameData) {
    const { name, description, platform, files } = gameData;
    const repoName = `${name.toLowerCase().replace(/\s+/g, '-')}-${platform}`;
    
    try {
      console.log(`Creating repository: ${repoName}`);
      
      // Create repository
      const repo = await this.octokit.repos.create({
        name: repoName,
        description: `AI Generated ${platform} Game: ${description}`,
        private: false,
        auto_init: true,
        gitignore_template: this.getGitignoreTemplate(platform)
      });

      // Upload game files
      await this.uploadGameFiles(repo.data.owner.login, repoName, files);
      
      // Create README
      await this.createGameReadme(repo.data.owner.login, repoName, gameData);
      
      return {
        repository: repo.data,
        url: repo.data.html_url,
        cloneUrl: repo.data.clone_url,
        status: 'created'
      };
    } catch (error) {
      console.error('Repository creation failed:', error);
      throw new Error(`Repository creation failed: ${error.message}`);
    }
  }

  async uploadGameFiles(owner, repo, files) {
    for (const [filePath, content] of Object.entries(files)) {
      try {
        await this.octokit.repos.createOrUpdateFileContents({
          owner,
          repo,
          path: filePath,
          message: `Add ${filePath}`,
          content: Buffer.from(content).toString('base64')
        });
        console.log(`Uploaded: ${filePath}`);
      } catch (error) {
        console.error(`Failed to upload ${filePath}:`, error);
      }
    }
  }

  async createGameReadme(owner, repo, gameData) {
    const { name, description, platform, gameType } = gameData;
    
    const readmeContent = `# ${name}

**AI Generated ${platform} ${gameType} Game**

## Description
${description}

## Platform
${platform.charAt(0).toUpperCase() + platform.slice(1)}

## Installation

${this.getInstallationInstructions(platform)}

## How to Run

${this.getRunInstructions(platform)}

## Features

- AI-generated game logic
- Modern ${platform} architecture
- Professional code structure
- Ready to build and deploy

## Generated by

AI Game Generator Pro - Professional game generation system

---

*This game was automatically generated using AI technology*`;

    try {
      await this.octokit.repos.createOrUpdateFileContents({
        owner,
        repo,
        path: 'README.md',
        message: 'Add game README',
        content: Buffer.from(readmeContent).toString('base64')
      });
    } catch (error) {
      console.error('Failed to create README:', error);
    }
  }

  getGitignoreTemplate(platform) {
    const templates = {
      'flutter': 'Dart',
      'react-native': 'Node',
      'unity': 'Unity',
      'web': 'Node'
    };
    return templates[platform] || 'Node';
  }

  getInstallationInstructions(platform) {
    const instructions = {
      'flutter': `\`\`\`bash\n# Install Flutter dependencies\nflutter pub get\n\n# Run on device/emulator\nflutter run\n\`\`\``,
      'react-native': `\`\`\`bash\n# Install dependencies\nnpm install\n\n# For iOS\nnpx react-native run-ios\n\n# For Android\nnpx react-native run-android\n\`\`\``,
      'unity': `\`\`\`\n1. Open Unity Hub\n2. Add this project\n3. Open in Unity Editor\n4. Build and Run\n\`\`\``,
      'web': `\`\`\`bash\n# Install dependencies\nnpm install\n\n# Start development server\nnpm start\n\`\`\``
    };
    return instructions[platform] || 'See platform documentation';
  }

  getRunInstructions(platform) {
    const instructions = {
      'flutter': 'Use `flutter run` to start the game on your connected device or emulator.',
      'react-native': 'Use `npx react-native run-ios` or `npx react-native run-android` to run the game.',
      'unity': 'Open the project in Unity Editor and click the Play button to test the game.',
      'web': 'Open your browser and navigate to the local development server URL.'
    };
    return instructions[platform] || 'Follow platform-specific instructions';
  }

  async listUserRepositories() {
    try {
      const repos = await this.octokit.repos.listForAuthenticatedUser({
        sort: 'updated',
        per_page: 100
      });
      return repos.data;
    } catch (error) {
      console.error('Failed to list repositories:', error);
      throw error;
    }
  }

  async deleteRepository(owner, repo) {
    try {
      await this.octokit.repos.delete({
        owner,
        repo
      });
      return { status: 'deleted', repository: `${owner}/${repo}` };
    } catch (error) {
      console.error('Failed to delete repository:', error);
      throw error;
    }
  }

  async createRelease(owner, repo, version, gameData) {
    try {
      const release = await this.octokit.repos.createRelease({
        owner,
        repo,
        tag_name: `v${version}`,
        name: `${gameData.name} v${version}`,
        body: `AI Generated ${gameData.platform} game release\n\n**Description:** ${gameData.description}\n\n**Platform:** ${gameData.platform}\n**Game Type:** ${gameData.gameType}`,
        draft: false,
        prerelease: false
      });
      
      return release.data;
    } catch (error) {
      console.error('Failed to create release:', error);
      throw error;
    }
  }
}

module.exports = GitHubIntegrator;